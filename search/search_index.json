{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Parampiper","text":"<p>parampiper is a tool for manage parameters across between systems/environments. </p> <p> </p>"},{"location":"#what-parampiper-brings","title":"What parampiper brings","text":"<ul> <li>\ud83c\udf0d Single Source of Truth (SSOT). All your parameters in one place.</li> <li>\ud83d\udcc4  Works on a simple JSON file.</li> <li>\ud83d\udd04 Support several backends (local file, Azure Blob).</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#macos","title":"MacOS","text":"<pre><code>brew install cdalar/tap/parampiper\n</code></pre>"},{"location":"#linux","title":"Linux","text":"<pre><code>curl -sLS https://www.p8r.dev/get.sh | sh \nsudo install p8r /usr/local/bin/\n</code></pre>"},{"location":"#windows","title":"Windows","text":"<ul> <li>download windows binary from releases page</li> <li>unzip and copy p8r.exe to a location in PATH</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration","title":"Configuration","text":"<p>Create the default configuration under <code>.p8r/parampiper.yaml</code> <pre><code>$ p8r init\np8r environment initialized\n</code></pre> Default configuration file is follows: <pre><code>local_file:\n  FilePath: parampiper.json\nazure_blob:\n  StorageAccountName: stparampiper\n  ContainerName: abc\n  BlobName: parampiper.json\n</code></pre></p>"},{"location":"configuration/#set-which-backend-provider-you-like-to-use","title":"Set which backend provider you like to use","text":"<ul> <li>local_file</li> <li>azure_blob</li> </ul> <p>Set Environment Variables <code>PP_DATA</code> to one of the above. <pre><code>export PP_DATA=local_file\n</code></pre></p>"},{"location":"crud/","title":"CRUD Actions","text":""},{"location":"crud/#addingupdating-parameters","title":"Adding/Updating Parameters","text":"<p><pre><code>p8r set -n key1 -v value1\n</code></pre> will add <code>key1</code> key with value <code>value1</code>.</p>"},{"location":"crud/#delete-parameters","title":"Delete Parameters","text":"<p><pre><code>p8r rm -n key1\n</code></pre> will delete the parameter named <code>key1</code></p>"},{"location":"crud/#list-parameters","title":"List Parameters","text":"<pre><code>p8r ls \nNAME   TYPE    VALUE    ATTRIBUTES   INFO\nkey1   basic   value1   0\n</code></pre>"},{"location":"crud/#output","title":"Output","text":"<p>Different ways to output parameters</p>"},{"location":"crud/#environment-variables","title":"Environment Variables","text":"<pre><code>p8r out -oexport &gt; export.sh\ncat export.sh\nexport KEY1=\"value1\"\n</code></pre>"},{"location":"crud/#exporting-as-terraform-tfvars-file","title":"Exporting as Terraform tfvars file","text":"<p><pre><code>p8r out -otfvars &gt; parameters.auto.tfvars\n</code></pre> by exporting it as *auto.tfvars (tfvars files) you can directly use it inside your terraform code. </p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<pre><code>$ p8r\na tool to manage parameters cross different environments\n\nUsage:\n  p8r [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  get         Get Parameter Value by Name\n  help        Help about any command\n  import      Import Parameters\n  init        create a .p8r directory with the default configuration files\n  ls          List Parameters\n  out         Output Parameters\n  rm          Delete Parameter\n  set         Add/Update Parameter\n  version     Print the version number of onctl\n\nFlags:\n  -c, --config string   Configuration file (default \".p8r/parampiper.yaml\")\n  -h, --help            help for p8r\n\nUse \"p8r [command] --help\" for more information about a command.\n</code></pre>"}]}